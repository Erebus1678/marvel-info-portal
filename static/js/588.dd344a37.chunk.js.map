{"version":3,"file":"static/js/588.dd344a37.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js"],"sourcesContent":["import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, erroInfo) {\n        console.log(error, erroInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) { return }\n\n        clearError()\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : undefined;\n    const spinner = !loading ? undefined : <Spinner />;\n    const content = !(loading || error || !char) ? <View char={char} /> : undefined;\n\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char\n    const imgNotFound = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={thumbnail === imgNotFound ? { objectFit: 'contain' } : {}}\n                />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">{comics.length === 0 ? null : 'Comics:'}</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line array-callback-return\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { useState } from 'react';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"names":["ErrorBoundary","state","error","erroInfo","console","log","this","setState","props","children","Component","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","useState","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","objectFit","charId","skeleton","undefined","selectedChar","setSelectedChar","decoration"],"sourceRoot":""}